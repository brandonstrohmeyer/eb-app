---
# Set Docker image and entrypoint
image:
  name: hashicorp/terraform:light
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

# Default output file for Terraform plan
variables:
  PLANPATH: plans

cache:
  paths:
    - .terraform

before_script:
  # Create directory for plans
  - |
    if [ ! -d ${PLANPATH} ]; then
      mkdir ${PLANPATH}
    fi

# Define pipeline stages
stages:
  - validate
  - plan
  - apply

# Include environment-specific yaml configuration files
include:
  - .gitlab-ci.d/lemony-ci.yml

# Set up job base configuration
.validate:
  stage: validate
  script: |
    echo "Validating ${DIR}"
    export PARENT=`pwd`;
    export MYDIR="${PARENT}/${DIR}";
    cd ${MYDIR};
    terraform init;
    terraform validate;
  only:
  - branches
  except:
  - master

.plan:
  stage: plan
  script: |
    export PARENT=`pwd`;
    export MYDIR="${PARENT}/${DIR}";
    cd ${MYDIR};
    echo "Planning ${DIR}";
    terraform init;
    terraform plan -lock-timeout=300s -out=${PARENT}/${PLANPATH}/${PLAN}.tfplan;
    # Copy all .tf files to plan directory.
    cp *.tf ${PARENT}/${PLANPATH}/
    # Copy contents of files directory.
    if [ -e files/ ]; then
      mkdir ${PARENT}/${PLANPATH}/files;
      cp files/* ${PARENT}/${PLANPATH}/files/;
    fi
  artifacts:
    name: plans
    paths:
      - plans/
  only:
  - master
  - merge_requests

.apply:
  stage: apply
  script: |
    echo "Applying ${PLAN}";
    export PARENT=`pwd`;
    cd ${PARENT}/${PLANPATH};
    terraform init;
    echo `pwd`
    terraform apply -input=false -lock-timeout=300s ${PARENT}/${PLANPATH}/${PLAN}.tfplan;
  when: manual
  allow_failure: false
  only:
    - master
